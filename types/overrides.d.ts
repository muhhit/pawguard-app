/* Temporary global type relaxers to unblock RN/Reanimated typings. Refine later. */
declare module 'react-native' {
  interface TransformsStyle {
    // widen transform typing to accept generic arrays of partial transform objects
    transform?: any;
  }
  
  // Export all commonly used React Native components and APIs
  export const View: any;
  export const Text: any;
  export const StyleSheet: any;
  export const TouchableOpacity: any;
  export const ScrollView: any;
  export const SafeAreaView: any;
  export const Dimensions: any;
  export const Modal: any;
  export const TextInput: any;
  export const Alert: any;
  export const ActivityIndicator: any;
  export const Image: any;
  export const Animated: any;
  export const Platform: any;
  export const Pressable: any;
  export const FlatList: any;
  export const SectionList: any;
  export const RefreshControl: any;
  export const StatusBar: any;
  export const KeyboardAvoidingView: any;
  export const Switch: any;
  export const Slider: any;
  export const Picker: any;
  export const DatePickerIOS: any;
  export const ProgressBarAndroid: any;
  export const ProgressViewIOS: any;
  export const SegmentedControlIOS: any;
  export const TabBarIOS: any;
  export const ToolbarAndroid: any;
  export const ViewPagerAndroid: any;
  export const DrawerLayoutAndroid: any;
  export const TouchableHighlight: any;
  export const TouchableNativeFeedback: any;
  export const TouchableWithoutFeedback: any;
  export const ImageBackground: any;
  export const VirtualizedList: any;
  export const InputAccessoryView: any;
  export const MaskedViewIOS: any;
  export const Button: any;
  export const Linking: any;
  export const Share: any;
  export const Vibration: any;
  export const Clipboard: any;
  export const NetInfo: any;
  export const PanResponder: any;
  export const PixelRatio: any;
  export const AppState: any;
  export const BackHandler: any;
  export const DeviceEventEmitter: any;
  export const NativeEventEmitter: any;
  export const NativeModules: any;
  export const PermissionsAndroid: any;
  export const Settings: any;
  export const Systrace: any;
  export const ToastAndroid: any;
  export const UIManager: any;
  export const unstable_batchedUpdates: any;
  export const YellowBox: any;
  export const LogBox: any;
  export const InteractionManager: any;
  export const LayoutAnimation: any;
  export const Easing: any;
  export const Keyboard: any;
  export const AccessibilityInfo: any;
  export const Alert: any;
  export const ActionSheetIOS: any;
  export const CameraRoll: any;
  export const ImageEditor: any;
  export const ImageStore: any;
  export const PushNotificationIOS: any;
  export const AsyncStorage: any;
  export const I18nManager: any;
  export const findNodeHandle: any;
  export const requireNativeComponent: any;
  export const takeSnapshot: any;
  export const processColor: any;
  export const ColorPropType: any;
  export const EdgeInsetsPropType: any;
  export const PointPropType: any;
  export const ViewPropTypes: any;
  export const TextPropTypes: any;
  export const ImagePropTypes: any;
  export const ScrollViewPropTypes: any;
  export const FlatListPropTypes: any;
  export const SectionListPropTypes: any;
  export const VirtualizedListPropTypes: any;
  export const TouchableOpacityPropTypes: any;
  export const TouchableHighlightPropTypes: any;
  export const TouchableNativeFeedbackPropTypes: any;
  export const TouchableWithoutFeedbackPropTypes: any;
  export const ButtonPropTypes: any;
  export const SwitchPropTypes: any;
  export const SliderPropTypes: any;
  export const PickerPropTypes: any;
  export const DatePickerIOSPropTypes: any;
  export const ProgressBarAndroidPropTypes: any;
  export const ProgressViewIOSPropTypes: any;
  export const SegmentedControlIOSPropTypes: any;
  export const TabBarIOSPropTypes: any;
  export const ToolbarAndroidPropTypes: any;
  export const ViewPagerAndroidPropTypes: any;
  export const DrawerLayoutAndroidPropTypes: any;
  export const ImageBackgroundPropTypes: any;
  export const InputAccessoryViewPropTypes: any;
  export const MaskedViewIOSPropTypes: any;
  export const ModalPropTypes: any;
  export const TextInputPropTypes: any;
  export const ActivityIndicatorPropTypes: any;
  export const StatusBarPropTypes: any;
  export const KeyboardAvoidingViewPropTypes: any;
  export const RefreshControlPropTypes: any;
  export const SafeAreaViewPropTypes: any;
}

declare module 'react-native-reanimated' {
  // Allow AnimatedStyle to be lenient when mixing DefaultStyle and animated props
  export type AnimatedStyle<T> = any;
  
  // Export commonly used Reanimated components and functions
  export const Animated: any;
  export const View: any;
  export const Text: any;
  export const ScrollView: any;
  export const Image: any;
  export const FlatList: any;
  export const SectionList: any;
  export const TouchableOpacity: any;
  export const TouchableHighlight: any;
  export const TouchableWithoutFeedback: any;
  export const TouchableNativeFeedback: any;
  export const Pressable: any;
  export const Button: any;
  export const Switch: any;
  export const TextInput: any;
  export const SafeAreaView: any;
  export const KeyboardAvoidingView: any;
  export const Modal: any;
  export const ImageBackground: any;
  export const VirtualizedList: any;
  export const InputAccessoryView: any;
  export const MaskedViewIOS: any;
  export const ActivityIndicator: any;
  export const StatusBar: any;
  export const RefreshControl: any;
  export const Slider: any;
  export const Picker: any;
  export const DatePickerIOS: any;
  export const ProgressBarAndroid: any;
  export const ProgressViewIOS: any;
  export const SegmentedControlIOS: any;
  export const TabBarIOS: any;
  export const ToolbarAndroid: any;
  export const ViewPagerAndroid: any;
  export const DrawerLayoutAndroid: any;
  
  // Reanimated specific exports
  export const useSharedValue: any;
  export const useAnimatedStyle: any;
  export const useAnimatedGestureHandler: any;
  export const useAnimatedScrollHandler: any;
  export const useAnimatedProps: any;
  export const useAnimatedRef: any;
  export const useAnimatedReaction: any;
  export const useDerivedValue: any;
  export const useWorkletCallback: any;
  export const runOnJS: any;
  export const runOnUI: any;
  export const withTiming: any;
  export const withSpring: any;
  export const withDecay: any;
  export const withDelay: any;
  export const withRepeat: any;
  export const withSequence: any;
  export const cancelAnimation: any;
  export const interpolate: any;
  export const interpolateColor: any;
  export const Extrapolate: any;
  export const Easing: any;
  export const FadeIn: any;
  export const FadeInDown: any;
  export const FadeInUp: any;
  export const FadeInLeft: any;
  export const FadeInRight: any;
  export const FadeOut: any;
  export const FadeOutDown: any;
  export const FadeOutUp: any;
  export const FadeOutLeft: any;
  export const FadeOutRight: any;
  export const SlideInDown: any;
  export const SlideInUp: any;
  export const SlideInLeft: any;
  export const SlideInRight: any;
  export const SlideOutDown: any;
  export const SlideOutUp: any;
  export const SlideOutLeft: any;
  export const SlideOutRight: any;
  export const ZoomIn: any;
  export const ZoomInDown: any;
  export const ZoomInUp: any;
  export const ZoomInLeft: any;
  export const ZoomInRight: any;
  export const ZoomOut: any;
  export const ZoomOutDown: any;
  export const ZoomOutUp: any;
  export const ZoomOutLeft: any;
  export const ZoomOutRight: any;
  export const BounceIn: any;
  export const BounceInDown: any;
  export const BounceInUp: any;
  export const BounceInLeft: any;
  export const BounceInRight: any;
  export const BounceOut: any;
  export const BounceOutDown: any;
  export const BounceOutUp: any;
  export const BounceOutLeft: any;
  export const BounceOutRight: any;
  export const FlipInXDown: any;
  export const FlipInXUp: any;
  export const FlipInYLeft: any;
  export const FlipInYRight: any;
  export const FlipOutXDown: any;
  export const FlipOutXUp: any;
  export const FlipOutYLeft: any;
  export const FlipOutYRight: any;
  export const StretchInX: any;
  export const StretchInY: any;
  export const StretchOutX: any;
  export const StretchOutY: any;
  export const LightSpeedInLeft: any;
  export const LightSpeedInRight: any;
  export const LightSpeedOutLeft: any;
  export const LightSpeedOutRight: any;
  export const PinwheelIn: any;
  export const PinwheelOut: any;
  export const RotateInDownLeft: any;
  export const RotateInDownRight: any;
  export const RotateInUpLeft: any;
  export const RotateInUpRight: any;
  export const RotateOutDownLeft: any;
  export const RotateOutDownRight: any;
  export const RotateOutUpLeft: any;
  export const RotateOutUpRight: any;
  export const RollInLeft: any;
  export const RollInRight: any;
  export const RollOutLeft: any;
  export const RollOutRight: any;
}

declare module 'expo-linear-gradient' {
  export interface LinearGradientProps {
    children?: React.ReactNode;
    colors: string[];
    style?: any;
    start?: { x: number; y: number };
    end?: { x: number; y: number };
    locations?: number[];
  }
  
  export class LinearGradient extends React.Component<LinearGradientProps> {}
  export default LinearGradient;
}

// Global type augmentations for common style properties
declare global {
  namespace React {
    interface CSSProperties {
      marginTop?: any;
      marginBottom?: any;
      marginLeft?: any;
      marginRight?: any;
      paddingTop?: any;
      paddingBottom?: any;
      paddingLeft?: any;
      paddingRight?: any;
      borderWidth?: any;
      borderColor?: any;
      borderStyle?: any;
      borderRadius?: any;
      backgroundColor?: any;
      color?: any;
      fontSize?: any;
      fontWeight?: any;
      fontFamily?: any;
      textAlign?: any;
      lineHeight?: any;
      letterSpacing?: any;
      textTransform?: any;
      textDecorationLine?: any;
      textDecorationStyle?: any;
      textDecorationColor?: any;
      textShadowColor?: any;
      textShadowOffset?: any;
      textShadowRadius?: any;
      includeFontPadding?: any;
      textAlignVertical?: any;
      fontVariant?: any;
      writingDirection?: any;
      width?: any;
      height?: any;
      minWidth?: any;
      maxWidth?: any;
      minHeight?: any;
      maxHeight?: any;
      position?: any;
      top?: any;
      left?: any;
      right?: any;
      bottom?: any;
      zIndex?: any;
      direction?: any;
      flexDirection?: any;
      flexWrap?: any;
      justifyContent?: any;
      alignItems?: any;
      alignSelf?: any;
      alignContent?: any;
      overflow?: any;
      flex?: any;
      flexGrow?: any;
      flexShrink?: any;
      flexBasis?: any;
      aspectRatio?: any;
      display?: any;
      backfaceVisibility?: any;
      opacity?: any;
      elevation?: any;
      shadowColor?: any;
      shadowOffset?: any;
      shadowOpacity?: any;
      shadowRadius?: any;
      transform?: any;
      transformMatrix?: any;
      rotation?: any;
      scaleX?: any;
      scaleY?: any;
      translateX?: any;
      translateY?: any;
      skewX?: any;
      skewY?: any;
      perspective?: any;
      testID?: any;
      accessible?: any;
      accessibilityLabel?: any;
      accessibilityHint?: any;
      accessibilityRole?: any;
      accessibilityState?: any;
      accessibilityValue?: any;
      accessibilityActions?: any;
      onAccessibilityAction?: any;
      accessibilityElementsHidden?: any;
      accessibilityViewIsModal?: any;
      onAccessibilityEscape?: any;
      onAccessibilityTap?: any;
      onMagicTap?: any;
      accessibilityIgnoresInvertColors?: any;
      accessibilityLiveRegion?: any;
      importantForAccessibility?: any;
      accessibilityComponentType?: any;
      accessibilityTraits?: any;
      onLayout?: any;
      pointerEvents?: any;
      removeClippedSubviews?: any;
      style?: any;
      nativeID?: any;
      collapsable?: any;
      needsOffscreenAlphaCompositing?: any;
      renderToHardwareTextureAndroid?: any;
      focusable?: any;
      shouldRasterizeIOS?: any;
      isTVSelectable?: any;
      hasTVPreferredFocus?: any;
      tvParallaxProperties?: any;
      tvParallaxShiftDistanceX?: any;
      tvParallaxShiftDistanceY?: any;
      tvParallaxTiltAngle?: any;
      tvParallaxMagnification?: any;
      onStartShouldSetResponder?: any;
      onMoveShouldSetResponder?: any;
      onResponderEnd?: any;
      onResponderGrant?: any;
      onResponderReject?: any;
      onResponderMove?: any;
      onResponderRelease?: any;
      onResponderStart?: any;
      onResponderTerminationRequest?: any;
      onResponderTerminate?: any;
      onStartShouldSetResponderCapture?: any;
      onMoveShouldSetResponderCapture?: any;
      onTouchStart?: any;
      onTouchMove?: any;
      onTouchEnd?: any;
      onTouchCancel?: any;
      onTouchEndCapture?: any;
      hitSlop?: any;
      onPress?: any;
      onPressIn?: any;
      onPressOut?: any;
      onLongPress?: any;
      delayPressIn?: any;
      delayPressOut?: any;
      delayLongPress?: any;
      disabled?: any;
      pressRetentionOffset?: any;
      android_disableSound?: any;
      android_ripple?: any;
      unstable_pressDelay?: any;
      children?: any;
    }
  }
}
